# from aiogram.dispatcher import FSMContext
# from aiogram.dispatcher.filters.state import State, StatesGroup
# from aiogram import types, Dispatcher
# from create_bot import dp
# from aiogram.dispatcher.filters import Text
# from datetime import datetime
# import database

# class Decesion(StatesGroup):
#     lierName = State()
#     lierDate = State()
#     lierText = State()

# # –ü–µ—Ä–≤—ã–π —à–∞–≥ —Ç–∞–±–ª–∏—Ü—ã –æ–±–º–∞–Ω–∞
# async def deception(message: types.Message):
#     await Decesion.lierName.set()
#     await message.answer("–ù–∞—á–∏–Ω–∞—é –ø—Ä–æ—Ü–µ–¥—É—Ä—É –∑–∞–ø–∏—Å–∏ –æ–±–º–∞–Ω—â–∏–∫–∞ –≤ —Ç–∞–±–ª–∏—Ü—É üßê")
#     await message.answer("–í—ã–±–µ—Ä–∏ –ª–∂–µ—Ü–∞: ")

# async def stop_deception(message: types.Message, state: FSMContext):
#     current_state = await state.get_state()
#     if current_state is None:
#         return
#     await state.finish()
#     await message.reply("–ó–∞–ø–∏—Å—å –æ—Ç–≤–µ—Ç–æ–≤ –æ—Ç–º–µ–Ω–µ–Ω–∞")

# # –õ–æ–≤–∏–º –ø–µ—Ä–≤—ã–π –æ—Ç–≤–µ—Ç
# async def deception_lierName(message: types.Message, state: FSMContext):
#     async with state.proxy() as data:
#         data['lierName'] = message.text
#     await Decesion.next()
#     await message.reply("–í–≤–µ–¥–∏ –¥–∞—Ç—É –æ–±–º–∞–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–¥.–º–º.–≥–≥–≥–≥ ")

# async def deception_lierDate(message: types.Message, state: FSMContext):
#     async with state.proxy() as data:
#         formated_date = ''
#         try:
#             formated_date = datetime.strptime(message.text, "%d.%m.%Y")
#         except:
#             await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑")
#             return
#         data['lierDate'] = formated_date
#     await Decesion.next()
#     await message.reply("–í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç –æ–±–º–∞–Ω–∞: ")

# async def deception_lierText(message: types.Message, state: FSMContext):
#     async with state.proxy() as data:
#         data['lierText'] = message.text

#     await database.sql_add_deception(state)
#     await message.reply("–í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∞–Ω–æ, –∫–æ–ª–ª–µ–≥–∞ ü´°")
#     await state.finish()

# def register_handlers_deception(dp: Dispatcher):
#     dp.register_message_handler(deception, commands=['deception'])
#     dp.register_message_handler(stop_deception, commands=['stop'], state="*")
#     dp.register_message_handler(stop_deception, Text(equals='–æ—Ç–º–µ–Ω–∞', ignore_case=True), state="*")
#     dp.register_message_handler(deception_lierName, state=Decesion.lierName)
#     dp.register_message_handler(deception_lierDate, state=Decesion.lierDate)
#     dp.register_message_handler(deception_lierText, state=Decesion.lierText)