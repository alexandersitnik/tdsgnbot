from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram import types, Dispatcher
from aiogram.dispatcher.filters import Text
from create_bot import bot
from datetime import datetime
from register_handlers import admins, translators
import sqlite3

try:
    db = sqlite3.connect('./data/tdsgnBotBase.db')
    c = db.cursor()
except:
    pass

class Sick(StatesGroup):
    MemberID = State()
    SickDate = State()
    isActive = State()

async def sick(message: types.Message, state: FSMContext):
    await Sick.MemberID.set()
    memberName = c.execute("SELECT Name FROM members WHERE TelegramID = ?", (message.from_user.id,)).fetchone()[0]
    await message.answer("–ù–∞—á–∏–Ω–∞—é –ø—Ä–æ—Ü–µ–¥—É—Ä—É –∑–∞–ø–∏—Å–∏ –±–æ–ª—å–Ω–∏—á–Ω–æ–≥–æ ü§í\n\n–¢—ã –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω –∫–∞–∫: " + memberName + ".\n\n –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ —Ç—ã –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ —Ö–æ—á–µ—à—å –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–ø–∏—Å—å, —Ç–æ –Ω–∞–ø–∏—à–∏ /stop –∏–ª–∏ ¬´–æ—Ç–º–µ–Ω–∞¬ª")
    async with state.proxy() as data:
        data['MemberID'] = c.execute("SELECT ID FROM members WHERE TelegramID = ?", (message.from_user.id,)).fetchone()[0]
    await Sick.next()
    await message.answer("–í–≤–µ–¥–∏ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –±–æ–ª—å–Ω–∏—á–Ω–æ–≥–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì")

async def stop_sick(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        return
    await state.finish()
    await message.reply("–ó–∞–ø–∏—Å—å –æ—Ç–≤–µ—Ç–æ–≤ –æ—Ç–º–µ–Ω–µ–Ω–∞")

async def sick_date(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        fromated_date = ''
        try:
            fromated_date = datetime.strptime(message.text, '%d.%m.%Y')
        except:
            await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑")
            return
        data['SickDate'] = fromated_date
    await message.answer('–ê —Ä–∞–±–æ—Ç–∞—Ç—å –±—É–¥–µ—à—å –∏–∑ –¥–æ–º–∞? (–¥–∞/–Ω–µ—Ç)')
    await Sick.next()

async def sick_is_active(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        if message.text.lower() == '–¥–∞':
            data['isActive'] = 1
        elif message.text.lower() == '–Ω–µ—Ç':
            data['isActive'] = 0
        else:
            await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑")
            return
    try:
        c.execute("INSERT INTO sick (MemberID, SickDate, isActive) VALUES (?, ?, ?)", (data['MemberID'], data['SickDate'], data['isActive']))
        db.commit()
        await message.answer("–ó–∞–ø–∏—Å—å –±–æ–ª—å–Ω–∏—á–Ω–æ–≥–æ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ\n –ü–æ–ø—Ä–∞–≤–ª—è–π—Å—è‚òÄÔ∏è\n\n –ï—Å–ª–∏ –≤–µ—á–µ—Ä–æ–º –ø–æ–π–º–µ—à—å, —á—Ç–æ –∑–∞–≤—Ç—Ä–∞ –Ω–µ –≤—ã–π–¥–µ—à—å –Ω–∞ —Ä–∞–±–æ—Ç—É, —Ç–æ –∑–∞–ø–æ–ª–Ω–∏ –µ—â–µ –æ–¥–∏–Ω –¥–µ–Ω—å /sick. –î–∞-–¥–∞ –∏ —Ç–∞–∫ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å, —á—Ç–æ –ø–æ–¥–µ–ª–∞—Ç—å ü§∑‚Äç‚ôÇÔ∏è")
        for el in admins:
            await bot.send_message(el, "#–±–æ–ª—å–Ω–∏—á–Ω—ã–µ\n\n –î–∞—Ç–∞: " + str(data['SickDate'].split(" ")[0]) + "\n" + "–ö—Ç–æ: " + c.execute("SELECT Name FROM members WHERE TelegramID = ?", (message.from_user.id,)).fetchone()[0] + "\n" + "–ë—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑ –¥–æ–º–∞: " + str(data['isActive']) + "\n\n P.S. 1 - —Ä–∞–±–æ—Ç–∞–µ—Ç –∏–∑ –¥–æ–º–∞, 0 - –Ω–µ—Ç")
        await state.finish()
    except:
        await message.answer("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑. –í–æ–∑–º–æ–∂–Ω–æ —Ç—ã —É–∂–µ –∑–∞–ø–∏—Å–∞–ª –±–æ–ª—å–Ω–∏—á–Ω—ã–π –Ω–∞ —ç—Ç—É –¥–∞—Ç—É, –ø–æ–ø—Ä–æ–±—É–π –∫–æ–º–∞–Ω–¥—É: /who_is_sick_today")
        await state.finish()

#–≤—ã–≤–æ–¥—ã –≤ –∫–ª–∏–µ–Ω—Ç—Å–∫—É—é —á–∞—Å—Ç—å

async def who_is_sick_today(message: types.Message):
    today = datetime.today().strftime('%Y-%m-%d 00:00:00')
    #–≤—ã–±—Ä–∞—Ç—å –≤—Å–µ—Ö –∫—Ç–æ —Å–µ–≥–æ–¥–Ω—è –±–æ–ª–µ–µ—Ç, –∑–∞–ø–∏—Å–∞—Ç—å –≤ —Å—Ç—Ä–æ–∫—É —Å –ø–µ—Ä–Ω–æ—Å–æ–º —Å—Ç—Ä–æ–∫–∏ –∏—Ö –∏–º–µ–Ω–∞ –∏ —Å—Ç–∞—É—Å (—Ä–∞–±–æ—Ç–∞–µ—Ç –∏–∑ –¥–æ–º–∞ –∏–ª–∏ –Ω–µ—Ç)
    sick_today = c.execute("SELECT members.Name, sick.isActive FROM members INNER JOIN sick ON members.ID = sick.MemberID WHERE sick.SickDate = ?", (today,)).fetchall()
    if sick_today:
        sick_today_str = ''
        for i in sick_today:
            if i[1] == 1:
                sick_today_str += i[0] + ' - —Ä–∞–±–æ—Ç–∞–µ—Ç –∏–∑ –¥–æ–º–∞\n'
            else:
                sick_today_str += i[0] + ' - –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç\n'
        await message.answer("–°–µ–≥–æ–¥–Ω—è –±–æ–ª–µ—é—Ç:\n" + sick_today_str)
    else:
        await message.answer("–°–µ–≥–æ–¥–Ω—è –Ω–∏–∫—Ç–æ –Ω–µ –±–æ–ª–µ–µ—Ç")



def register_handlers_sick(dp: Dispatcher):
    dp.register_message_handler(sick, Text(equals="/sick"), state="*")
    dp.register_message_handler(stop_sick, Text(equals="/stop"), state="*")
    dp.register_message_handler(stop_sick, Text(equals="–æ—Ç–º–µ–Ω–∞"), state="*")
    dp.register_message_handler(sick_date, state=Sick.SickDate)
    dp.register_message_handler(sick_is_active, state=Sick.isActive)
    dp.register_message_handler(who_is_sick_today, Text(equals="/who_is_sick_today"))