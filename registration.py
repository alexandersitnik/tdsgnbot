import calendar
import random
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram import types, Dispatcher
from aiogram.dispatcher.filters import Text
from create_bot import bot
from datetime import datetime, timedelta
from register_handlers import admins
import sqlite3


class UserRegistration(StatesGroup):
    confirm = None
    name = State()
    department = State()
    grade = State()
    birthday = State()
    employment = State()


async def start_registration (message: types.Message):
    await message.answer(
        "–ù–∞—á–∏–Ω–∞—é –ø—Ä–æ—Ü–µ–¥—É—Ä—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ üßê\n\n–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–ø–∏—Å—å, —Ç–æ –Ω–∞–ø–∏—à–∏ /stop –∏–ª–∏ ¬´–æ—Ç–º–µ–Ω–∞¬ª")
    await message.answer("–í–≤–µ–¥–∏ —Å–≤–æ—ë –∏–º—è")
    await UserRegistration.name.set()


async def stop_registration (message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        return
    await state.finish()
    await message.reply("–ó–∞–ø–∏—Å—å –æ—Ç–≤–µ—Ç–æ–≤ –æ—Ç–º–µ–Ω–µ–Ω–∞")


async def name (message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['name'] = message.text
        await message.answer("–í–≤–µ–¥–∏ —Å–≤–æ–π –æ—Ç–¥–µ–ª")
        await UserRegistration.next()


async def department (message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['department'] = message.text
        await message.answer("–í–≤–µ–¥–∏ —Å–≤–æ–π —É—Ä–æ–≤–µ–Ω—å")
        await UserRegistration.next()


async def grade (message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['grade'] = message.text
        await message.answer("–í–≤–µ–¥–∏ —Å–≤–æ—é –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì")
        await UserRegistration.next()


async def birthday (message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        formated_date = ''
        try:
            formated_date = datetime.strptime(message.text, '%d.%m.%Y')
        except:
            await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑")
            return
        data['birthday'] = formated_date
        await message.answer("–í–≤–µ–¥–∏ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì")
        await UserRegistration.next()


async def employment (message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        formated_date = ''
        try:
            formated_date = datetime.strptime(message.text, '%d.%m.%Y')
        except:
            await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑")
            return
        data['employment'] = formated_date
        await message.answer(
            "–í—Å—ë –≤–µ—Ä–Ω–æ?\n\n–ò–º—è: " + data['name'] + "\n–û—Ç–¥–µ–ª: " + data['department'] + "\n–£—Ä–æ–≤–µ–Ω—å: " + data[
                'grade'] + "\n–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: " + data['birthday'].strftime('%d.%m.%Y') + "\n–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã: " +
            data['employment'].strftime('%d.%m.%Y') + "\n\n–ï—Å–ª–∏ –≤—Å—ë –≤–µ—Ä–Ω–æ, —Ç–æ –Ω–∞–ø–∏—à–∏ ¬´–¥–∞¬ª –∏–ª–∏ ¬´–Ω–µ—Ç¬ª")
        await UserRegistration.next()


async def confirm (message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        if message.text.lower() == '–¥–∞':
            c = sqlite3.connect('users.db')
            c.execute("INSERT INTO members (Name, Department, Grade, Birthday, Employment) VALUES (?, ?, ?, ?, ?)",
                      (data['name'], data['department'], data['grade'], data['birthday'], data['employment']))
            c.commit()
            await message.answer("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ")
            await state.finish()
        elif message.text.lower() == '–Ω–µ—Ç':
            await message.answer("–ó–∞–ø–∏—Å—å –æ—Ç–≤–µ—Ç–æ–≤ –æ—Ç–º–µ–Ω–µ–Ω–∞")
            await state.finish()
        else:
            await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑")
            return


def register_handlers_registration (dp: Dispatcher):
    dp.register_message_handler(start_registration, commands="registration", state="*")
    dp.register_message_handler(stop_registration, commands="stop", state="*")
    dp.register_message_handler(name, state=UserRegistration.name)
    dp.register_message_handler(department, state=UserRegistration.department)
    dp.register_message_handler(grade, state=UserRegistration.grade)
    dp.register_message_handler(birthday, state=UserRegistration.birthday)
    dp.register_message_handler(employment, state=UserRegistration.employment)
    dp.register_message_handler(confirm, state=UserRegistration.confirm)
