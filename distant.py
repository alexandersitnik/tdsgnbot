from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram import types, Dispatcher
from aiogram.dispatcher.filters import Text
from create_bot import bot
from datetime import datetime
from register_handlers import admins
import sqlite3

superAdmin_ID = 265007461

try:
    db = sqlite3.connect('./data/tdsgnBotBase.db')
    c = db.cursor()
except:
    pass

#-------------------------------–ó–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∫–∏ —á–µ—Ä–µ–∑ –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π------------------------------------------------

class Distants(StatesGroup):
    distantMember = State()
    distantMemberDate = State()

async def distant(message: types.Message, state: FSMContext):
    if (message.chat.type == 'private'):
        await Distants.distantMember.set()
        memberName = c.execute("SELECT Name FROM members WHERE TelegramID = ?", (message.from_user.id,)).fetchone()[0]
        await message.answer("–ù–∞—á–∏–Ω–∞—é –ø—Ä–æ—Ü–µ–¥—É—Ä—É –∑–∞–ø–∏—Å–∏ —É–¥–∞–ª—ë–Ω–∫–∏ üßê\n\n–¢—ã –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω –∫–∞–∫: " + memberName + ".\n\n –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ —Ç—ã –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ —Ö–æ—á–µ—à—å –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–ø–∏—Å—å, —Ç–æ –Ω–∞–ø–∏—à–∏ /stop –∏–ª–∏ ¬´–æ—Ç–º–µ–Ω–∞¬ª")
        async with state.proxy() as data:
            data['distantMember'] = c.execute("SELECT ID FROM members WHERE TelegramID = ?", (message.from_user.id,)).fetchone()[0]
        await Distants.next()
        await message.answer("–í–≤–µ–¥–∏ –¥–∞—Ç—É —É–¥–∞–ª—ë–Ω–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì")
    else:
        await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö")

async def stop_distant(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        return
    await state.finish()
    await message.answer("–ó–∞–ø–∏—Å—å –æ—Ç–≤–µ—Ç–æ–≤ –æ—Ç–º–µ–Ω–µ–Ω–∞")

async def distant_distantMember(message: types.Message, state: FSMContext):

    async with state.proxy() as data:
        formated_date = ''
        try:
            formated_date = datetime.strptime(message.text, "%d.%m.%Y")
        except:
            await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑")
            return
        data['distantMemberDate'] = formated_date
        try:
            c.execute("INSERT INTO distant (MemberID, DistantDate) VALUES (?, ?)", (data['distantMember'], data['distantMemberDate']))
            db.commit()
        except:
            await message.reply("–¢–∞–∫–∞—è –∑–∞–ø–∏—Å—å —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ.\n –ü–æ—Å–º–æ—Ç—Ä–∏ —Å–≤–æ–∏ —É–¥–∞–ª—ë–Ω–∫–∏: /my_distant")
            await state.finish()
            return
        # await database.sql_add_distant(state)
        await message.answer("–í–∞—à–∞ —É–¥–∞–ª—ë–Ω–∫–∞ –∑–∞–ø–∏—Å–∞–Ω–∞, –∫–æ–ª–ª–µ–≥–∞ ü´°")
        for el in admins:
            await bot.send_message(el, "#—É–¥–∞–ª—ë–Ω–∫–∏\n–ù–æ–≤–∞—è —É–¥–∞–ª—ë–Ω–∫–∞:\n\n" + c.execute("SELECT Name FROM members WHERE ID = ?", (data['distantMember'],)).fetchone()[0] + "\n" + str(data['distantMemberDate']).split(" ")[0])
        await state.finish()

class Feedback(StatesGroup):
    feedbackMember = State()
    feedbackMemberText = State()

async def feedback(message: types.Message, state: FSMContext):
    if (message.chat.type == 'private'):
        await Feedback.feedbackMember.set()
        memberName = c.execute("SELECT Name FROM members WHERE TelegramID = ?", (message.from_user.id,)).fetchone()[0]
        await message.answer("–û—Ö... –ù–∞–≤–µ—Ä–Ω–æ–µ —á—Ç–æ-—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–µ —Ç–∞–∫, –∫–∞–∫ –Ω–∞–¥–æ... –•–æ—Ç—è... –ú–æ–∂–µ—Ç —Ç—ã —Ö–æ—á–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π –æ—Ç–∑—ã–≤? üßê\n\n–¢—ã –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω –∫–∞–∫: " + memberName + ".\n\n –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ —Ç—ã –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ —Ö–æ—á–µ—à—å –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–ø–∏—Å—å, —Ç–æ –Ω–∞–ø–∏—à–∏ /stop –∏–ª–∏ ¬´–æ—Ç–º–µ–Ω–∞¬ª")
        async with state.proxy() as data:
            data['feedbackMember'] = c.execute("SELECT ID FROM members WHERE TelegramID = ?", (message.from_user.id,)).fetchone()[0]
        await Feedback.next()
        await message.answer("–í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏: ")
    else:
        await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö")

async def stop_feedback(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        return
    await state.finish()
    await message.reply("–ó–∞–ø–∏—Å—å –æ—Ç–≤–µ—Ç–æ–≤ –æ—Ç–º–µ–Ω–µ–Ω–∞")

async def feedback_feedbackMember(message: types.Message, state: FSMContext):
    
        async with state.proxy() as data:
            data['feedbackMemberText'] = message.text
            try:
                await bot.send_message(superAdmin_ID, "#feedback\n\n" + " " + message.from_user.first_name + " –ü–∏—à–µ—Ç: \n\n" + data['feedbackMemberText'] + "\n\n" + "–î–∞—Ç–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è: \n\n" + str(datetime.now()).split(" ")[0])
            except:
                await message.reply("–ü–æ—á–µ–º—É-—Ç–æ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ. –°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ —É —Ç–µ–±—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ –∏–º—è –≤ —Ç–µ–ª–µ–≥–µ.")
                await state.finish()
                return
            # await database.sql_add_distant(state)
            await message.reply("–í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –æ—á–µ–Ω—å –≤–∞–∂–Ω–æ –¥–ª—è –Ω–∞—Å! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º!\n –Ø –ø–µ—Ä–µ–¥–∞–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é @AlexanderSitnik")
            await state.finish()

#----------------------------–í—ã–≤–æ–¥—ã –≤ –∫–ª–∏–µ–Ω—Ç—Å–∫—É—é —á–∞—Å—Ç—å----------------------------------------------------

#–≤—ã–≤–µ—Å—Ç–∏ –∏–º–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —É –∫–æ—Ç–æ—Ä—ã—Ö —Å–µ–≥–æ–¥–Ω—è —É–¥–∞–ª—ë–Ω–∫–∞
async def distant_today(message: types.Message):
    today = datetime.today().strftime('%Y-%m-%d')
    today += ' 00:00:00'
    distant_today = c.execute("SELECT Name FROM members WHERE ID IN (SELECT MemberID FROM distant WHERE DistantDate = ?)", (today,)).fetchall()
    distant_today_list = ''
    if distant_today != []:
        for el in distant_today:
            distant_today_list += 'üìå ' + str(el[0]) + '\n'
        await message.answer("üè† –°–µ–≥–æ–¥–Ω—è —É–¥–∞–ª—ë–Ω–∫–∞ —É: \n\n" + str(distant_today_list))
    else:
        await message.answer("–°–µ–≥–æ–¥–Ω—è —É–¥–∞–ª—ë–Ω–æ–∫ –Ω–∏ —É –∫–æ–≥–æ –Ω–µ—Ç")
    return distant_today_list

async def distant_today_personal():
    today = datetime.today().strftime('%Y-%m-%d')
    today += ' 00:00:00'
    distant_today = c.execute("SELECT Name FROM members WHERE ID IN (SELECT MemberID FROM distant WHERE DistantDate = ?)", (today,)).fetchall()
    distant_today_list = ''
    if distant_today != []:
        for el in distant_today:
            distant_today_list += '‚Äì ' + str(el[0]) + '\n'
    await bot.send_message(superAdmin_ID, "–°–µ–≥–æ–¥–Ω—è —É–¥–∞–ª—ë–Ω–∫–∞ —É: \n\n" + str(distant_today_list))

#–≤—ã–≤–µ—Å—Ç–∏ —Å–≤–æ–∏ —É–¥–∞–ª—ë–Ω–∫–∏
async def my_distant(message: types.Message):
    distant_member = c.execute("SELECT DistantDate FROM distant WHERE MemberID IN (SELECT ID FROM members WHERE TelegramID = ?) AND DistantDate BETWEEN date('now', 'start of month') AND date('now', 'start of month', '+1 month')", (message.from_user.id,)).fetchall()
    distant_member_list = ''
    distant_member_remainder = 3 - len(distant_member)
    for el in distant_member:
        distant_member_list += str(el[0])[0:10] + '\n'
    if distant_member_list != []:
        await message.answer("–¢–≤–æ–∏ —É–¥–∞–ª—ë–Ω–∫–∏ —ç—Ç–æ–≥–æ –º–µ—Å—è—Ü–∞:\n" + "\n" + distant_member_list + "\n" + "–û—Å—Ç–∞–ª–æ—Å—å —É–¥–∞–ª—ë–Ω–æ–∫: " + str(distant_member_remainder))
    else:
        await message.answer("–£ —Ç–µ–±—è –µ—â—ë –Ω–µ—Ç —É–¥–∞–ª—ë–Ω–æ–∫ –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ")

async def get_sudo_command(message: types.Message):
    if message.from_user.id == superAdmin_ID:
        await message.answer("–í–æ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –¥–ª—è —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞:\n/get_all_id ‚Äì –ø–æ–ª—É—á–∏—Ç—å TelergamID –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ\n/get_my_id ‚Äì –ø–æ–ª—É—á–∏—Ç—å ID —á–∞—Ç–∞ –∏–ª–∏ –±–µ—Å–µ–¥—ã\n/get_db ‚Äì –ø–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
    else:
        await message.answer("–¢—ã –Ω–µ —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω!")

async def get_all_id(message: types.Message):
    if message.from_user.id == superAdmin_ID:
        all_id = c.execute("SELECT Name, TelegramID FROM members").fetchall()
        all_id_list = ''
        for el in all_id:
            all_id_list += str(el[0]) + ' - ' + str(el[1]) + '\n'
        await message.answer("–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏ –∏—Ö id:\n" + "\n" + all_id_list)
    else:
        await message.answer("–¢—ã –Ω–µ —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω!")

async def get_my_id(message: types.Message):
    await message.answer("–¢–≤–æ–π TelegramID: " + str(message.chat.id) + '\n P.S. TelegramID –±–µ—Å–µ–¥ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –º–∏–Ω—É—Å–∞')

async def who_am_i(message: types.Message):
    # –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ: Name, Department, Grade, Birthday, Employment
    try:
        member_info = c.execute("SELECT Name, Grade, Birthday, Employment FROM members WHERE TelegramID = ?", (message.from_user.id,)).fetchall()
        await message.answer("–¢–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ:\n\n" + "–ò–º—è: " + str(member_info[0][0]) + "\n" + "–ì—Ä–µ–π–¥: " + str(member_info[0][1]) + "\n" + "–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: " + str(member_info[0][2]) + "\n" + "–î–∞—Ç–∞ —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: " + str(member_info[0][3]) + '\n' + "\nP.S. –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫, –Ω–∞–ø–∏—à–∏ /feedback –∏ —Å–æ–æ–±—â–∏ –æ–± –æ—à–∏–±–∫–µ")   
    except:
        await message.answer("–¢—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        return


async def what_time_is_it(message: types.Message):
    await bot.send_message(message.from_user.id, "–°–µ–π—á–∞—Å " + str(datetime.now().strftime('%H:%M:%S')))

def register_handlers_distant(dp: Dispatcher):
    dp.register_message_handler(distant, commands=['distant'])
    dp.register_message_handler(stop_distant, commands=['stop'], state="*")
    dp.register_message_handler(stop_distant, Text(equals='–æ—Ç–º–µ–Ω–∞', ignore_case=True), state="*")
    dp.register_message_handler(distant_distantMember, state=Distants.distantMemberDate)
    dp.register_message_handler(distant_today, commands=['distant_today'])
    dp.register_message_handler(my_distant, commands=['my_distant'])
    dp.register_message_handler(feedback, commands=['feedback'])
    dp.register_message_handler(stop_feedback, commands=['stop'], state="*")
    dp.register_message_handler(stop_feedback, Text(equals='–æ—Ç–º–µ–Ω–∞', ignore_case=True), state="*")
    dp.register_message_handler(feedback_feedbackMember, state=Feedback.feedbackMemberText)
    dp.register_message_handler(get_all_id, commands=['get_all_id'])
    dp.register_message_handler(get_my_id, commands=['get_my_id'])
    dp.register_message_handler(get_sudo_command, commands=['sudo'])
    dp.register_message_handler(who_am_i, commands=['who_am_i'])
    dp.register_message_handler(what_time_is_it, commands=['time'])