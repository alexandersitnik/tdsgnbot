from calendar import monthrange
import calendar
import random
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram import types, Dispatcher
from aiogram.dispatcher.filters import Text
from create_bot import bot
from datetime import datetime, timedelta
from register_handlers import admins
import sqlite3

try:
    db = sqlite3.connect('./data/tdsgnBotBase.db')
    c = db.cursor()
except:
    pass


class Ssl(StatesGroup):
    sslName = State()
    sslStartDate = State()
    sslEndDate = State()
    sslIsPaid = State()


async def add_new_ssl (message: types.Message, state: FSMContext):
    if (message.from_user.id in admins):
        await message.answer(
            "–ù–∞—á–∏–Ω–∞—é –ø—Ä–æ—Ü–µ–¥—É—Ä—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ üßê\n\n–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–ø–∏—Å—å, —Ç–æ –Ω–∞–ø–∏—à–∏ /stop –∏–ª–∏ ¬´–æ—Ç–º–µ–Ω–∞¬ª")
        await message.answer("–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –¥–æ–±–∞–≤–ª—è–µ–º SSL")
        await Ssl.sslName.set()
    else:
        await message.answer("–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")


async def stop_ssl (message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        return
    await state.finish()
    await message.reply("–ó–∞–ø–∏—Å—å –æ—Ç–≤–µ—Ç–æ–≤ –æ—Ç–º–µ–Ω–µ–Ω–∞")


async def sslName (message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['sslName'] = message.text
        await message.answer("–í–≤–µ–¥–∏ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –¥–µ–π—Å—Ç–≤–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì")
        await Ssl.next()


async def sslStartDate (message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        formated_date = ''
        try:
            formated_date = datetime.strptime(message.text, '%d.%m.%Y')
        except:
            await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑")
            return
        data['sslStartDate'] = formated_date
        await message.answer("–í–≤–µ–¥–∏ –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì")
        await Ssl.next()


async def sslEndDate (message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        formated_date = ''
        try:
            formated_date = datetime.strptime(message.text, '%d.%m.%Y')
        except:
            await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑")
            return
        data['sslEndDate'] = formated_date
        await message.answer("–°–µ—Ä—Ç–∏–∫ –ø–ª–∞—Ç–Ω—ã–π?")
        await Ssl.next()


async def sslIsPaid (message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['sslIsPaid'] = message.text
        try:
            c.execute("INSERT INTO SSL VALUES (?, ?, ?, ?)",
                      (data['sslName'], data['sslStartDate'], data['sslEndDate'], data['sslIsPaid']))
            db.commit()
            await message.answer("–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
            await state.finish()
        except:
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
            return


async def get_ssl_table (message: types.Message):
    if (message.chat.type == 'private' and message.from_user.id in admins):
        ssl_table = c.execute("SELECT * FROM SSL").fetchall()
        await message.answer("–¢–∞–±–ª–∏—Ü–∞ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤:")
        for row in ssl_table:
            await message.answer(f"–ù–∞–∑–≤–∞–Ω–∏–µ: {row[0]}\n–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞: {row[1]}\n–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {row[2]}\n–ü–ª–∞—Ç–Ω—ã–π: {row[3]}")
    else:
        await message.answer("–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")

def register_handlers_ssl (dp: Dispatcher):
    dp.register_message_handler(add_new_ssl, commands=['add_ssl'])
    dp.register_message_handler(stop_ssl, commands=['stop'], state="*")
    dp.register_message_handler(sslName, state=Ssl.sslName)
    dp.register_message_handler(sslStartDate, state=Ssl.sslStartDate)
    dp.register_message_handler(sslEndDate, state=Ssl.sslEndDate)
    dp.register_message_handler(sslIsPaid, state=Ssl.sslIsPaid)
    dp.register_message_handler(get_ssl_table, commands=['get_ssl_table'])
