from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram import types, Dispatcher
from aiogram.dispatcher.filters import Text
from datetime import datetime
from register_handlers import translators, admins
import sqlite3

try:
    db = sqlite3.connect('./data/tdsgnBotBase.db')
    c = db.cursor()
except:
    pass

class Vacations(StatesGroup):
    vacationMember = State()
    vacationMemberStartDate = State()
    vacationMemberEndDate = State()
    vacationIsPaid = State()

async def vacation(message: types.Message, state: FSMContext):
    if (message.chat.type == 'private'):
        await Vacations.vacationMember.set()
        memberName = c.execute("SELECT Name FROM members WHERE TelegramID = ?", (message.from_user.id,)).fetchone()[0]
        await message.answer("–ù–∞—á–∏–Ω–∞—é –ø—Ä–æ—Ü–µ–¥—É—Ä—É –∑–∞–ø–∏—Å–∏ –æ—Ç–ø—É—Å–∫–∞ üßê\n\n–¢—ã –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω –∫–∞–∫: " + memberName + ".\n\n –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ —Ç—ã –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ —Ö–æ—á–µ—à—å –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–ø–∏—Å—å, —Ç–æ –Ω–∞–ø–∏—à–∏ /stop –∏–ª–∏ ¬´–æ—Ç–º–µ–Ω–∞¬ª")
        async with state.proxy() as data:
            data['vacationMember'] = c.execute("SELECT ID FROM members WHERE TelegramID = ?", (message.from_user.id,)).fetchone()[0]
        await Vacations.next()
        await message.answer("–í–≤–µ–¥–∏ –¥–∞—Ç—É –æ—Ç–ø—É—Å–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì")
    else:
        await message.answer("–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö")

async def stop_vacation(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        return
    await state.finish()
    await message.reply("–ó–∞–ø–∏—Å—å –æ—Ç–≤–µ—Ç–æ–≤ –æ—Ç–º–µ–Ω–µ–Ω–∞")

async def vacationMemberStartDate(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        formated_date = ''
        try:
            formated_date = datetime.strptime(message.text, '%d.%m.%Y')
        except:
            await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑")
            return
        data['vacationMemberStartDate'] = formated_date
        await message.answer("–í–≤–µ–¥–∏ –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –æ—Ç–ø—É—Å–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì")
        await Vacations.next()

async def vacationMemberEndDate(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        formated_date = ''
        try:
            formated_date = datetime.strptime(message.text, '%d.%m.%Y')
        except:
            await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑")
            return
        data['vacationMemberEndDate'] = formated_date
        await message.answer("–û—Ç–ø—É—Å–∫ –æ–ø–ª–∞—á–∏–≤–∞–µ—Ç—Å—è? (–î–∞/–ù–µ—Ç)")
        await Vacations.next()

async def vacationIsPaid(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        if message.text.lower() == '–¥–∞':
            data['vacationIsPaid'] = 1
        elif message.text.lower() == '–Ω–µ—Ç':
            data['vacationIsPaid'] = 0
        else:
            await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑")
            return
        #–∑–∞–ø–∏—Å–∞—Ç—å –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        c.execute("INSERT INTO vacation (MemberID, StartVacationDay, EndVacationDay, isPaid) VALUES (?, ?, ?, ?)", (data['vacationMember'], data['vacationMemberStartDate'], data['vacationMemberEndDate'], data['vacationIsPaid']))
        db.commit()
        await message.answer("–û—Ç–ø—É—Å–∫ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω")
        for el in admins:
            await message.bot.send_message(el, "#–æ—Ç–ø—É—Å–∫–∏\n\n –ù–æ–≤—ã–π –æ—Ç–ø—É—Å–∫ —É: \n" + c.execute("SELECT Name FROM members WHERE ID = ?", (data['vacationMember'],)).fetchone()[0] + " –∑–∞–ø–∏—Å–∞–ª –æ—Ç–ø—É—Å–∫ —Å " + data['vacationMemberStartDate'].strftime('%d.%m.%Y') + " –ø–æ " + data['vacationMemberEndDate'].strftime('%d.%m.%Y') + ".\n\n–û–ø–ª–∞—á–∏–≤–∞–µ—Ç—Å—è: " + ("–î–∞" if data['vacationIsPaid'] == 1 else "–ù–µ—Ç"))
        await state.finish()

#----------------------------–í—ã–≤–æ–¥—ã –≤ –∫–ª–∏–µ–Ω—Ç—Å–∫—É—é —á–∞—Å—Ç—å----------------------------------------------------

# –≤—ã–≤–µ—Å—Ç–∏ –≤—Å–µ –º–æ–∏ –æ—Ç–ø—É—Å–∫–∏ –≤ —Ç–µ–∫—É—â–µ–º –≥–æ–¥—É
async def my_vacations(message: types.Message, state: FSMContext):
    totalDays = 0
    i = 1
    myVacationsAnswer = '–í–æ—Ç —Ç–≤–æ–∏ –æ—Ç–ø—É—Å–∫–∞ –≤ —Ç–µ–∫—É—â–µ–º –≥–æ–¥—É:\n\n'
    memberID = c.execute("SELECT ID FROM members WHERE TelegramID = ?", (message.from_user.id,)).fetchone()[0]
    vacations = c.execute("SELECT * FROM vacation WHERE MemberID = ? AND StartVacationDay BETWEEN ? AND ?", (memberID, datetime(datetime.now().year, 1, 1), datetime(datetime.now().year, 12, 31))).fetchall()
    if len(vacations) == 0:
        await message.answer("–£ —Ç–µ–±—è –Ω–µ—Ç –æ—Ç–ø—É—Å–∫–æ–≤ –≤ —Ç–µ–∫—É—â–µ–º –≥–æ–¥—É")
        return
    else:
        for vacation in vacations:
            myVacationsAnswer += "–û—Ç–ø—É—Å–∫ ‚Ññ " + str(i) + '\n' + ' c ' +str(vacation[1].split()[0]) + " –ø–æ " + str(vacation[2].split()[0]) + '\n'
            #–ø—Ä–∏–≤–µ—Å—Ç–∏ vacation[1] –∏ vacation[2] –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —è–≤–ª—è—é—Ç—Å—è —Å—Ç—Ä–æ–∫–æ–π –∫ —Ç–∏–ø—É datetime
            dayTwo = vacation[2]
            dayTwo = datetime.strptime(dayTwo, '%Y-%m-%d %H:%M:%S')
            dayOne = vacation[1]
            dayOne = datetime.strptime(dayOne, '%Y-%m-%d %H:%M:%S')
            countOfVacationDays = dayTwo - dayOne
            totalDays += int(countOfVacationDays.days)
            i += 1
        myVacationsAnswer += "\n–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π –≤ —ç—Ç–æ–º –≥–æ–¥—É: " + str(28-totalDays)
        await message.answer(myVacationsAnswer)

# –≤—ã–≤–µ—Å—Ç–∏ –µ—Å—Ç—å –ª–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è —É –∫–æ–≥–æ-—Ç–æ –æ—Ç–ø—É—Å–∫
async def today_vacations(message: types.Message):
    todayVacationsAnswer = '–°–µ–≥–æ–¥–Ω—è –≤ –æ—Ç–ø—É—Å–∫–µ:\n\n'
    todaydate = datetime.now()
    todaydate= todaydate.replace(hour=0, minute=0, second=0, microsecond=0)
    vacations = c.execute("SELECT * FROM vacation WHERE StartVacationDay <= ? AND EndVacationDay >= ?", (todaydate, todaydate)).fetchall()
    if len(vacations) == 0:
        await message.answer("*–í –æ—Ç–ø—É—Å–∫–µ –Ω–∏–∫–æ–≥–æ*", parse_mode= 'Markdown')
        return
    else:
        for vacation in vacations:
            memberName = c.execute("SELECT Name FROM members WHERE ID = ?", (vacation[0],)).fetchone()[0]
            todayVacationsAnswer += memberName + '\n'
        await message.answer(todayVacationsAnswer)
        


def register_handlers_vacation(dp: Dispatcher):
    dp.register_message_handler(vacation, commands="vacation", state="*")
    dp.register_message_handler(stop_vacation, Text(equals="–æ—Ç–º–µ–Ω–∞", ignore_case=True), state="*")
    dp.register_message_handler(vacationMemberStartDate, state=Vacations.vacationMemberStartDate)
    dp.register_message_handler(vacationMemberEndDate, state=Vacations.vacationMemberEndDate)
    dp.register_message_handler(vacationIsPaid, state=Vacations.vacationIsPaid)
    dp.register_message_handler(my_vacations, commands="my_vacations")
    dp.register_message_handler(today_vacations, commands="today_vacations")